!(function() {
  'use strict';
  (L.Marker.Measurement = L[L.Layer ? 'Layer' : 'Class'].extend({
    options: { pane: 'markerPane' },
    initialize: function(e, t, s, n, a) {
      L.setOptions(this, a),
        (this._latlng = e),
        (this._measurement = t),
        (this._title = s),
        (this._rotation = n);
    },
    addTo: function(e) {
      return e.addLayer(this), this;
    },
    onAdd: function(e) {
      this._map = e;
      var t = this.getPane ? this.getPane() : e.getPanes().markerPane,
        s = (this._element = L.DomUtil.create(
          'div',
          'leaflet-zoom-animated leaflet-measure-path-measurement',
          t,
        )),
        n = L.DomUtil.create('div', '', s);
      (n.title = this._title),
        (n.innerHTML = this._measurement),
        e.on('zoomanim', this._animateZoom, this),
        this._setPosition();
    },
    onRemove: function(e) {
      e.off('zoomanim', this._animateZoom, this),
        (this.getPane ? this.getPane() : e.getPanes().markerPane).removeChild(
          this._element,
        ),
        (this._map = null);
    },
    _setPosition: function() {
      L.DomUtil.setPosition(
        this._element,
        this._map.latLngToLayerPoint(this._latlng),
      ),
        (this._element.style.transform += ' rotate(' + this._rotation + 'rad)');
    },
    _animateZoom: function(e) {
      var t = this._map
        ._latLngToNewLayerPoint(this._latlng, e.zoom, e.center)
        .round();
      L.DomUtil.setPosition(this._element, t),
        (this._element.style.transform += ' rotate(' + this._rotation + 'rad)');
    },
  })),
    (L.marker.measurement = function(e, t, s, n, a) {
      return new L.Marker.Measurement(e, t, s, n, a);
    });
  function e(e) {
    var t = this._measurementOptions.imperial
      ? 404.685642 < e
        ? ((e /= 4046.85642), 'ac')
        : ((e /= 0.09290304), 'ft²')
      : this._measurementOptions.ha
      ? 1e9 < e
        ? ((e /= 1e9), 'km²')
        : 1e4 < e
        ? ((e /= 1e4), 'ha')
        : 'm²'
      : 1e6 < e
      ? ((e /= 1e6), 'km²')
      : 'm²';
    return e < 100 ? e.toFixed(1) + ' ' + t : Math.round(e) + ' ' + t;
  }
  function d(e) {
    function t(e) {
      return (e * Math.PI) / 180;
    }
    var s,
      n,
      a,
      i,
      r,
      o = 0,
      m = e.length;
    if (2 < m) {
      for (var h = 0; h < m; h++)
        (r =
          h === m - 2
            ? ((a = m - 2), (i = m - 1), 0)
            : h === m - 1
            ? ((a = m - 1), (i = 0), 1)
            : ((i = (a = h) + 1), h + 2)),
          (s = e[a]),
          (n = e[i]),
          (o += (t(e[r].lng) - t(s.lng)) * Math.sin(t(n.lat)));
      o = (o * u * u) / 2;
    }
    return Math.abs(o);
  }
  function t() {
    var e =
      this.options.measurementOptions &&
      this.options.measurementOptions.showOnHover;
    this.options.showMeasurements && !e && this.showMeasurements(),
      this.options.showMeasurements &&
        e &&
        (this.on('mouseover', function() {
          this.showMeasurements();
        }),
        this.on('mouseout', function() {
          this.hideMeasurements();
        }));
  }
  function s(s, n, e) {
    return e
      ? function() {
          return n.apply(this, arguments), s.apply(this, arguments);
        }
      : function() {
          var e = s.apply(this, arguments),
            t = Array.prototype.slice.call(arguments);
          return t.push(e), n.apply(this, t);
        };
  }
  var u = 6378137;
  L.Polyline.include({
    showMeasurements: function(e) {
      return (
        !this._map ||
          this._measurementLayer ||
          ((this._measurementOptions = L.extend(
            {
              showOnHover: (e && e.showOnHover) || !1,
              minPixelDistance: 30,
              showDistances: !0,
              showArea: !0,
              showTotalDistance: !0,
              lang: {
                totalLength: 'Total length',
                totalArea: 'Total area',
                segmentLength: 'Segment length',
              },
            },
            e || {},
          )),
          (this._measurementLayer = L.layerGroup().addTo(this._map)),
          this.updateMeasurements(),
          this._map.on('zoomend', this.updateMeasurements, this)),
        this
      );
    },
    hideMeasurements: function() {
      return this._map
        ? (this._map.off('zoomend', this.updateMeasurements, this),
          this._measurementLayer &&
            (this._map.removeLayer(this._measurementLayer),
            (this._measurementLayer = null)),
          this)
        : this;
    },
    onAdd: s(L.Polyline.prototype.onAdd, function(e) {
      var t =
        this.options.measurementOptions &&
        this.options.measurementOptions.showOnHover;
      return (
        this.options.showMeasurements &&
          !t &&
          this.showMeasurements(this.options.measurementOptions),
        e
      );
    }),
    onRemove: s(
      L.Polyline.prototype.onRemove,
      function(e) {
        return this.hideMeasurements(), e;
      },
      !0,
    ),
    setLatLngs: s(L.Polyline.prototype.setLatLngs, function(e) {
      return this.updateMeasurements(), e;
    }),
    spliceLatLngs: s(L.Polyline.prototype.spliceLatLngs, function(e) {
      return this.updateMeasurements(), e;
    }),
    formatDistance: function(e) {
      var t,
        s = this._measurementOptions.imperial
          ? 3e3 < (t = e / 0.3048)
            ? ((e /= 1609.344), 'mi')
            : ((e = t), 'ft')
          : 1e3 < e
          ? ((e /= 1e3), 'km')
          : 'm';
      return e < 100 ? e.toFixed(1) + ' ' + s : Math.round(e) + ' ' + s;
    },
    formatArea: e,
    updateMeasurements: function() {
      if (!this._measurementLayer) return this;
      var e,
        t,
        s,
        n,
        a,
        i,
        r,
        o = this.getLatLngs(),
        m = this instanceof L.Polygon,
        h = this._measurementOptions,
        u = 0;
      if (
        (o && o.length && L.Util.isArray(o[0]) && (o = o[0]),
        this._measurementLayer.clearLayers(),
        this._measurementOptions.showDistances && 1 < o.length)
      ) {
        e =
          this._measurementOptions.formatDistance ||
          L.bind(this.formatDistance, this);
        for (var l = 1, p = o.length; (m && l <= p) || l < p; l++)
          (t = o[l - 1]),
            (s = o[l % p]),
            (u += i = t.distanceTo(s)),
            (n = this._map.latLngToLayerPoint(t)),
            (a = this._map.latLngToLayerPoint(s)),
            n.distanceTo(a) >= h.minPixelDistance &&
              L.marker
                .measurement(
                  this._map.layerPointToLatLng([
                    (n.x + a.x) / 2,
                    (n.y + a.y) / 2,
                  ]),
                  e(i),
                  h.lang.segmentLength,
                  this._getRotation(t, s),
                  h,
                )
                .addTo(this._measurementLayer);
        !m &&
          this._measurementOptions.showTotalDistance &&
          L.marker
            .measurement(s, e(u), h.lang.totalLength, 0, h)
            .addTo(this._measurementLayer);
      }
      return (
        m &&
          h.showArea &&
          2 < o.length &&
          ((e = h.formatArea || L.bind(this.formatArea, this)),
          (r = d(o)),
          L.marker
            .measurement(
              this.getBounds().getCenter(),
              e(r),
              h.lang.totalArea,
              0,
              h,
            )
            .addTo(this._measurementLayer)),
        this
      );
    },
    _getRotation: function(e, t) {
      var s = this._map.project(e),
        n = this._map.project(t);
      return Math.atan((n.y - s.y) / (n.x - s.x));
    },
  }),
    L.Polyline.addInitHook(function() {
      t.call(this);
    }),
    L.Circle.include({
      showMeasurements: function(e) {
        return (
          !this._map ||
            this._measurementLayer ||
            ((this._measurementOptions = L.extend(
              {
                showOnHover: !1,
                showArea: !0,
                lang: { totalArea: 'Total area' },
              },
              e || {},
            )),
            (this._measurementLayer = L.layerGroup().addTo(this._map)),
            this.updateMeasurements(),
            this._map.on('zoomend', this.updateMeasurements, this)),
          this
        );
      },
      hideMeasurements: function() {
        return this._map
          ? (this._map.on('zoomend', this.updateMeasurements, this),
            this._measurementLayer &&
              (this._map.removeLayer(this._measurementLayer),
              (this._measurementLayer = null)),
            this)
          : this;
      },
      onAdd: s(L.Circle.prototype.onAdd, function(e) {
        var t =
          this.options.measurementOptions &&
          this.options.measurementOptions.showOnHover;
        return (
          this.options.showMeasurements &&
            !t &&
            this.showMeasurements(this.options.measurementOptions),
          e
        );
      }),
      onRemove: s(
        L.Circle.prototype.onRemove,
        function(e) {
          return this.hideMeasurements(), e;
        },
        !0,
      ),
      setLatLng: s(L.Circle.prototype.setLatLng, function(e) {
        return this.updateMeasurements(), e;
      }),
      setRadius: s(L.Circle.prototype.setRadius, function(e) {
        return this.updateMeasurements(), e;
      }),
      formatArea: e,
      updateMeasurements: function() {
        var e, t, s, n, a, i;
        this._measurementLayer &&
          ((e = this.getLatLng()),
          (s =
            (t = this._measurementOptions).formatArea ||
            L.bind(this.formatArea, this)),
          this._measurementLayer.clearLayers(),
          t.showArea &&
            ((s = t.formatArea || L.bind(this.formatArea, this)),
            (a = this.getRadius()),
            (i = a / u),
            (n = 2 * Math.PI * u * u * (1 - Math.cos(i))),
            L.marker
              .measurement(e, s(n), t.lang.totalArea, 0, t)
              .addTo(this._measurementLayer)));
      },
    }),
    L.Circle.addInitHook(function() {
      t.call(this);
    });
})();
